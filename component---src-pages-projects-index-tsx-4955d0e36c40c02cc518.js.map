{"version":3,"file":"component---src-pages-projects-index-tsx-4955d0e36c40c02cc518.js","mappings":"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","sources":["webpack://martials-website/./node_modules/react-feather/dist/icons/github.js","webpack://martials-website/./src/components/tag.tsx","webpack://martials-website/./src/pages/projects/index.tsx"],"sourcesContent":["function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { forwardRef } from 'react';\nvar GitHub = forwardRef(function (_ref, ref) {\n  var _ref$color = _ref.color,\n      color = _ref$color === void 0 ? 'currentColor' : _ref$color,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 24 : _ref$size,\n      rest = _objectWithoutProperties(_ref, [\"color\", \"size\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    ref: ref,\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: size,\n    height: size,\n    viewBox: \"0 0 24 24\",\n    fill: \"none\",\n    stroke: color,\n    strokeWidth: \"2\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  }, rest), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M9 19c-5 1.5-5-2.5-7-3m14 6v-3.87a3.37 3.37 0 0 0-.94-2.61c3.14-.35 6.44-1.54 6.44-7A5.44 5.44 0 0 0 20 4.77 5.07 5.07 0 0 0 19.91 1S18.73.65 16 2.48a13.38 13.38 0 0 0-7 0C6.27.65 5.09 1 5.09 1A5.07 5.07 0 0 0 5 4.77a5.44 5.44 0 0 0-1.5 3.78c0 5.42 3.3 6.61 6.44 7A3.37 3.37 0 0 0 9 18.13V22\"\n  }));\n});\nGitHub.displayName = 'GitHub';\nexport default GitHub;","import * as React from \"react\";\n\ninterface Tag {\n    name?: string,\n    value?: number,\n    className?: string,\n    onClick?: React.MouseEventHandler<HTMLButtonElement>,\n}\n\nconst Tag = ({ name, value, className, onClick }: Tag) => {\n    return (\n        <button\n            className={ `${ onClick !== undefined ? \"cursor-pointer\" : \"cursor-auto\" } ${ className } border rounded-xl border-slate-300` }\n            onClick={ onClick }>\n            <span className={ \"mx-2 w-max\" }>{ name + (value !== undefined ? `(${ value })` : \"\") }</span>\n        </button>\n    )\n}\n\nexport default Tag;\n","import * as React from \"react\";\nimport Layout, { Links } from \"../../components/layout\";\nimport { graphql, Link, PageProps } from \"gatsby\";\nimport { GitHub } from \"react-feather\";\nimport { GatsbyImage, getImage, IGatsbyImageData } from \"gatsby-plugin-image\";\nimport { useTranslation } from \"gatsby-plugin-react-i18next\";\nimport Tag from \"../../components/tag\";\n\n/**\n * Takes a String in a csv format, separated by \";\" and returns an array of strings\n * @param csv A String representation of a csv file\n */\nexport const splitCSV = (csv: string) => csv.split(\";\");\n\n/**\n * Contains cards of all projects with some information, and links to the posts\n * @param data A query containing data from the posts\n * @returns {JSX.Element}\n * @constructor\n */\nconst ProjectPage = ({ data: { allMdx } }: PageProps<Queries.ProjectPageQuery>): JSX.Element => {\n\n    const { t } = useTranslation();\n    let image: IGatsbyImageData | undefined;\n\n    // TODO have a button to hide / show tags, hidden by default\n    // TODO update tags when one is selected, so it will only show the relevant ones\n    const tagMap: any[] = [];\n    let objectIndex = 0;\n    for (let nodeIndex = 0; nodeIndex < allMdx.nodes.length; nodeIndex++) {\n        const tagArray = splitCSV(allMdx.nodes[nodeIndex].frontmatter?.tags ?? \"\");\n\n        if (tagArray !== undefined) {\n            for (let i = 0; i < tagArray.length; i++) {\n\n                let found = false;\n                for (let j = 0; j < tagMap.length; j++) {\n                    if (tagArray[i] === tagMap[j].key) {\n                        tagMap[j].value += 1;\n                        found = true;\n                    }\n                }\n                if (!found) {\n                    tagMap[objectIndex] = {\n                        key: tagArray[i],\n                        value: 1,\n                    };\n                    objectIndex++;\n                }\n            }\n        }\n    }\n    tagMap.sort(function (a: any, b: any) {\n        return b.value - a.value\n    });\n\n    const [selectedTag, setSelectedTag] = React.useState(\"\");\n\n    /**\n     * Updates the state of the current selected tag to a new one. If the new one is the same as the old, reset.\n     * @param key The key for the new tag\n     */\n    function updateTagState(key: string) {\n        if (selectedTag === key) {\n            setSelectedTag(\"\");\n        }\n        else {\n            setSelectedTag(key);\n        }\n    }\n\n    return (\n        <Layout\n            title={ t(\"projects\") }\n            headline={ t(\"myProjects\") }\n            description={ t(\"projectsByMe\") }\n            current={ Links.projects }>\n            <div>\n                <div className={ \"flex flex-wrap gap-1 mb-5\" }>\n                    {\n                        tagMap.map((tag: any) =>\n                            <div key={ tag.key }>\n                                <Tag name={ tag.key }\n                                     value={ tag.value }\n                                     onClick={ () => updateTagState(tag.key) }\n                                     className={ `hover:border-primaryPurple\n                                     ${ selectedTag === tag.key ? \"border-primaryPurple\" : \"\" }` }/>\n                            </div>)\n                    }\n                </div>\n                {\n                    allMdx.nodes.map((node: any) => (\n                        <div key={ node.id }>\n                            {\n                                selectedTag === \"\" || node.frontmatter?.tags.includes(selectedTag) ?\n\n                                    <article className={ \"border-2 rounded-xl mb-10 shadow\" }>\n                                        <div className={\"mx-2 mb-2\"}>\n                                            <div className={ \"flex items-center my-3\" }>\n                                                <Link\n                                                    className={ \"text-primaryPurple dark:text-primaryPink hover:underline\" }\n                                                    to={ node.slug }>\n                                                    <h2 className={ \"text-xl\" }>{ node.frontmatter?.title }</h2>\n                                                </Link>\n                                                <a title={ t(\"openInGitHub\") } href={ node.frontmatter?.source }\n                                                   target={ \"_blank\" } rel={ \"noreferrer\" }><GitHub/>\n                                                </a>\n                                            </div>\n                                            <div className={ \"grid grid-flow-col justify-between mb-2\" }>\n                                                <p>\n                                                    { t(\"timeToRead\") } { node.timeToRead } { (node.timeToRead === 1) ?\n                                                    t(\"minute\") : t(\"minutes\") }\n                                                </p>\n                                            </div>\n                                            <div className={ \"flex flex-row flex-wrap gap-1\" }>\n                                                {\n                                                    splitCSV(node.frontmatter.tags).map(tag =>\n                                                        <div key={ tag }>\n                                                            <Tag name={ tag }/>\n                                                        </div>)\n                                                }\n                                            </div>\n                                        </div>\n\n                                        { (() => { // Used to initiate the variable image in order to null check it\n                                            image = getImage(node.frontmatter?.hero_image.childImageSharp.gatsbyImageData)\n                                            return true;\n                                        })() }\n                                        { image ?\n                                            <GatsbyImage alt={ node.frontmatter?.hero_image_alt }\n                                                         image={ image }/> : null }\n                                        <div className={ \"mx-2 my-4\" }>\n                                            <p>{ node.frontmatter?.description }</p>\n                                        </div>\n                                    </article>\n                                    : null\n                            }\n                        </div>\n                    ))\n                }\n            </div>\n        </Layout>\n    );\n}\n\nexport const query = graphql`\n    query ProjectPage ($language: String!) {\n        locales: allLocale(filter: {language: {eq: $language}}) {\n            edges {\n                node {\n                    ns\n                    data\n                    language\n                }\n            }\n        }\n        allMdx(sort: {fields: frontmatter___uploaded, order: DESC}) {\n            nodes {\n                frontmatter {\n                    title\n                    description\n                    tags\n                    source\n                    hero_image_alt\n                    hero_image {\n                        childImageSharp {\n                            gatsbyImageData\n                        }\n                    }\n                    uploaded\n                }\n                id\n                slug\n                timeToRead\n            }\n        }\n    }\n`;\n\nexport default ProjectPage;\n"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","GitHub","forwardRef","_ref","ref","_ref$color","color","_ref$size","size","rest","xmlns","width","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","d","displayName","name","value","className","onClick","React","undefined","splitCSV","csv","split","image","allMdx","data","t","useTranslation","tagMap","objectIndex","nodeIndex","nodes","tagArray","frontmatter","_allMdx$nodes$nodeInd2","tags","found","j","sort","a","b","selectedTag","setSelectedTag","Layout","title","headline","description","current","Links","map","tag","Tag","node","id","_node$frontmatter","includes","Link","to","slug","_node$frontmatter2","href","_node$frontmatter3","rel","timeToRead","getImage","_node$frontmatter4","hero_image","childImageSharp","gatsbyImageData","GatsbyImage","alt","_node$frontmatter5","hero_image_alt","_node$frontmatter6"],"sourceRoot":""}