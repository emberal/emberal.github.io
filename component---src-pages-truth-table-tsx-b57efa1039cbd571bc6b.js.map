{"version":3,"file":"component---src-pages-truth-table-tsx-b57efa1039cbd571bc6b.js","mappings":"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","sources":["webpack://martials-website/./node_modules/react-feather/dist/icons/search.js","webpack://martials-website/./src/components/input.tsx","webpack://martials-website/./src/classes/operator.ts","webpack://martials-website/./src/classes/expression.ts","webpack://martials-website/./src/pages/truth-table.tsx","webpack://martials-website/./node_modules/@babel/runtime/helpers/esm/objectDestructuringEmpty.js"],"sourcesContent":["function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { forwardRef } from 'react';\nvar Search = forwardRef(function (_ref, ref) {\n  var _ref$color = _ref.color,\n      color = _ref$color === void 0 ? 'currentColor' : _ref$color,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 24 : _ref$size,\n      rest = _objectWithoutProperties(_ref, [\"color\", \"size\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    ref: ref,\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: size,\n    height: size,\n    viewBox: \"0 0 24 24\",\n    fill: \"none\",\n    stroke: color,\n    strokeWidth: \"2\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  }, rest), /*#__PURE__*/React.createElement(\"circle\", {\n    cx: \"11\",\n    cy: \"11\",\n    r: \"8\"\n  }), /*#__PURE__*/React.createElement(\"line\", {\n    x1: \"21\",\n    y1: \"21\",\n    x2: \"16.65\",\n    y2: \"16.65\"\n  }));\n});\nSearch.displayName = 'Search';\nexport default Search;","import * as React from \"react\";\n\ninterface Input {\n    className?: string,\n    id?: string,\n    name?: string,\n    type?: string,\n    placeholder?: string,\n    required?: boolean,\n    onChange?: React.ChangeEventHandler<HTMLInputElement>,\n    leading?: React.ReactElement<HTMLElement>,\n    trailing?: React.ReactElement<HTMLElement>,\n}\n\nconst Input = ({ className, id, name, type, placeholder, required, onChange, leading, trailing }: Input) => {\n    return (\n        <div className={ \"flex flex-row items-center\" }>\n            { leading }\n            <input\n                className={ `dark:bg-gray-900 focus:border-primaryPurple outline-none border-2 border-gray-500 pl-2 ${ className }` }\n                id={ id }\n                name={ name }\n                type={ type }\n                placeholder={ placeholder }\n                required={ required }\n                onChange={ onChange }/>\n            { trailing }\n        </div>\n    );\n}\n\nexport default Input;\n","interface Values {\n    values?: string[],\n}\n\nexport class Operator {\n\n    public constructor(operator: string, weight: number, { values = [] }: Values) {\n        this.operator = operator;\n        this.weight = weight;\n        this.values = values;\n    }\n\n    operator: string;\n    weight: number;\n    values: string[];\n\n    static implication = new Operator(\">\", 0, { values: [\"implication\", \"impliserer\", \"->\", \"=>\"] });\n    static or = new Operator(\"|\", 1, { values: [\"or\", \"eller\", \"V\", \"\\\\/\"] });\n    static and = new Operator(\"&\", 2, { values: [\"and\", \"og\", \"/\\\\\"] });\n    static not = new Operator(\"!\", 3, { values: [\"not\", \"ikke\", \"¬\", \"~\", \"-\"] });\n\n    public static getValues(): Operator[] {\n        return [Operator.implication, Operator.or, Operator.and, Operator.not];\n    }\n\n    public append(val: string): void {\n        this.values[this.values.length] = val;\n    }\n\n    public toString(): string {\n        return this.operator;\n    }\n\n}\n","import { Operator } from \"./operator\";\n\nexport class Expression {\n\n    public constructor(exp1: Expression | string | null, operator: Operator | null, exp2: Expression | string | null, {\n        leading = \"\",\n        trailing = \"\",\n        isAtomic = false,\n    }) {\n        this.leading = leading;\n        this.exp1 = exp1;\n        this.operator = operator;\n        this.exp2 = exp2;\n        this.trailing = trailing;\n        this.isAtomic = isAtomic;\n    }\n\n    leading: string;\n    exp1: Expression | string | null;\n    operator: Operator | null;\n    exp2: Expression | string | null;\n    trailing: string;\n    isAtomic: boolean;\n\n    public equals(other: Expression | string): boolean {\n\n        if (this === other) { // If they are the same object, or a string with the same content, return true\n            return true;\n        }\n        else if (typeof this !== \"string\" && typeof other !== \"string\") {\n            if (this.isAtomic && other.isAtomic && this.exp1 === other.exp1) {\n                return true;\n            }\n            else if (!(this.isAtomic || other.isAtomic)) { // If neither is atomic\n\n                if (((this.exp1 === other.exp1 && this.exp2 === other.exp2) ||\n                    (this.exp1 === other.exp2 && this.exp2 === other.exp1)) && this.operator === other.operator) {\n                    return true;\n                }\n            }\n            // TODO check children of both objects\n        }\n        else { // One is a string while the other is an Expression\n\n            const isEqual = (exp1: Expression | string, exp2: Expression | string): boolean => {\n                return typeof exp1 === \"string\" && typeof exp2 !== \"string\" && exp1 === exp2.exp1;\n            };\n\n            if (isEqual(this, other) || isEqual(other, this)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public getAtomicValue(): string | null {\n        if (this.isAtomic) {\n            if (typeof this.exp1 === \"string\") {\n                return this.exp1;\n            }\n            else {\n                if (this.exp1) {\n                    return this.exp1.getAtomicValue();\n                }\n            }\n        }\n        return null;\n    }\n\n    public laws(): void {\n        this.distributivity();\n        this.deMorgansLaw();\n        this.assosiativeLaw();\n        this.commutativeLaw();\n        this.eliminationOfImplication();\n        this.absorption();\n    }\n\n    /**\n     * @example A & B | B & C <=> B & (A | C)\n     */\n    public distributivity(): void {\n\n        const x = (exp1: Expression, exp2: Expression) => { // FIXME does not compare all values\n            let common: Expression | string | null;\n\n            if (exp1.exp1 === exp2.exp1) {\n                common = exp1.exp1;\n                this.exp2 = new Expression(exp1.exp2, this.operator, exp2.exp2, { leading: \"(\", trailing: \")\" });\n                this.exp1 = new Expression(common, null, null, { isAtomic: true });\n                this.operator = this.operator === Operator.and ? Operator.or : Operator.and;\n            }\n            else if (exp1.exp1 === exp2.exp2) {\n                common = exp1.exp1;\n                this.exp2 = new Expression(exp1.exp2, this.operator, exp2.exp1, { leading: \"(\", trailing: \")\" });\n                this.exp1 = new Expression(common, null, null, { isAtomic: true });\n                this.operator = this.operator === Operator.and ? Operator.or : Operator.and;\n            }\n        }\n\n        if (this.exp1 !== null && this.exp2 !== null && typeof this.exp1 === \"object\" && typeof this.exp2 === \"object\") {\n            x(this.exp1, this.exp2);\n            x(this.exp2, this.exp1);\n        }\n    }\n\n    /**\n     * @example !A & !B <=> !(A | B)\n     */\n    public deMorgansLaw(): void {\n        if (this.exp1 !== null && this.exp2 !== null) {\n            if (this._isNot(this.exp1) && this._isNot(this.exp2)) {\n                let op = null;\n\n                switch (this.operator) {\n                    case Operator.and:\n                        op = Operator.or;\n                        break;\n                    case Operator.or:\n                        op = Operator.and;\n                }\n\n                if (op !== null) {\n                    this.exp1 = new Expression(this._removeNot(this.exp1), op, this._removeNot(this.exp2), {\n                        leading: \"!(\",\n                        trailing: \")\"\n                    });\n                    this.operator = null;\n                    this.exp2 = null;\n                }\n            }\n        }\n    }\n\n    private _isNot(exp: Expression | string): boolean {\n        if (typeof exp === \"string\") {\n            return exp.charAt(0) === \"!\";\n        }\n        return exp.leading === \"!\";\n    }\n\n    private _removeNot(exp: Expression | string): Expression | string {\n        if (typeof exp === \"string\") {\n            return this._removeNotFromString(exp);\n        }\n        return this._removeNotFromExp(exp);\n    }\n\n    private _removeNotFromString(exp: string): string {\n        return exp.replace(\"!\", \"\");\n    }\n\n    private _removeNotFromExp(exp: Expression): Expression {\n        exp.leading = \"\";\n        return exp;\n    }\n\n    public assosiativeLaw(): void {\n        // TODO\n    }\n\n    public commutativeLaw(): void {\n        // TODO\n    }\n\n    /**\n     * @example A -> B <=> !A | B\n     */\n    public eliminationOfImplication(): void {\n        if (this.exp1 !== null && this.operator === Operator.implication && this.exp2 !== null) {\n            if (typeof this.exp1 === \"string\") {\n                this.exp1 = \"!\" + this.exp1;\n            }\n            else {\n                this.exp1.leading = \"!(\";\n                this.exp1.trailing = \")\";\n            }\n            this.operator = Operator.or;\n        }\n    }\n\n    /**\n     * @example A & (A | B) <=> A or A | (A & B) <=> A\n     */\n    public absorption(): void {\n\n        if (this.exp1 !== null && this.exp2 !== null && typeof this.exp1 !== \"string\" && typeof this.exp2 !== \"string\") {\n\n            const removeExp2 = () => { // TODO save exp1 in parent, if possible\n                this.leading = \"\";\n                this.operator = null;\n                this.exp2 = null;\n                this.trailing = \"\";\n                this.isAtomic = true;\n            };\n\n            if (this.exp1?.isAtomic && this.exp2?.isAtomic && this.exp1.getAtomicValue() === this.exp2.getAtomicValue()) {\n                removeExp2();\n            }\n            else if (this.exp1.isAtomic || this.exp2.isAtomic) { // eg: A | (A & B)\n\n                const contains = (exp1: Expression, exp2: string): boolean => {\n\n                    let correctOperators = this.operator === Operator.and && exp1.operator === Operator.or;\n                    if (!correctOperators) {\n                        correctOperators = this.operator === Operator.or && exp1.operator === Operator.and;\n                    }\n\n                    return correctOperators && (typeof exp1.exp1 !== \"string\" && typeof exp1.exp2 !== \"string\" &&\n                        (exp2 === exp1.exp1?.getAtomicValue() || exp2 === exp1.exp2?.getAtomicValue()));\n                };\n\n                if (this.exp1.isAtomic) {\n                    const atomic = this.exp1.getAtomicValue();\n                    if (atomic !== null && contains(this.exp2, atomic)) {\n                        removeExp2();\n                    }\n                }\n                else {\n                    const atomic = this.exp2.getAtomicValue();\n                    if (atomic !== null && contains(this.exp1, atomic)) {\n                        this.exp1 = this.exp2;\n                        removeExp2();\n                    }\n                }\n            }\n            else { // Neither of the expressions are atomic, eg: (A & B) | (A & B)\n                if (this.exp1.equals(this.exp2)) {\n                    removeExp2();\n                }\n            }\n        }\n    }\n\n    public toString(): string {\n        let s = this.leading;\n        if (this.exp1 !== null) {\n            s += this.exp1.toString();\n\n            if (this.operator !== null) {\n                s += \" \" + this.operator.toString();\n\n                if (this.exp2 !== null) {\n                    s += \" \" + this.exp2.toString();\n                }\n            }\n            s += this.trailing;\n        }\n        return s;\n    }\n}","import * as React from \"react\";\nimport Layout from \"../components/layout\";\nimport Input from \"../components/input\";\nimport { graphql } from \"gatsby\";\nimport { Expression } from \"../classes/expression\";\nimport { Operator } from \"../classes/operator\";\nimport { Search } from \"react-feather\";\n\ninterface TruthTablePage {\n\n}\n\n// TODO remember strength: !, &, |, ->\n\nexport function simplify(stringExp: string): string {\n    return removeOuterParenthesis(simplifyRec(stringExp).toString());\n}\n\nfunction simplifyRec(stringExp: string): Expression {\n\n    stringExp = removeOuterParenthesis(stringExp); // TODO use, or move?\n    const end = stringExp.length;\n\n    if (stringExp.length < 3) {\n        return new Expression(stringExp, null, null, { isAtomic: true });\n    }\n\n    const center = getCenterOperatorIndex(stringExp);\n\n    const exp = new Expression(simplifyRec(stringExp.substring(0, center.index)), center.operator,\n        simplifyRec(stringExp.substring(center.index + 1, end)), { leading: \"(\", trailing: \")\" }); // TODO only use parenthesis when needed to\n    exp.absorption(); // TODO use all\n    exp.distributivity(); // FIXME\n\n    if (exp.operator === Operator.and) { // TODO improve\n        exp.leading = \"\";\n        exp.trailing = \"\";\n    }\n    return exp;\n}\n\n/**\n *\n * @param stringExp\n * @returns {number} The index position of the center operator based on the weight of the operators\n */\nfunction getCenterOperatorIndex(stringExp: string): any {\n\n    const arr: any[] = [];\n    let index = 0;\n    for (let i = 0; i < stringExp.length; i++) {\n\n        let operators = 0;\n        try {\n            // Skips all lines within parenthesis\n            let c = stringExp.charAt(i);\n            while ( c === \"(\" || operators > 0 ) {\n                c = stringExp.charAt(i);\n                if (c === \"(\") {\n                    operators++;\n                }\n                else if (c === \")\") {\n                    operators--;\n                }\n                i++;\n            }\n        }\n        catch (error) {\n            console.error(error);\n        }\n\n        // Finds the matching Operator\n        for (const value of Operator.getValues()) {\n            if (value.operator === stringExp.charAt(i) && value.operator !== Operator.not.operator) {\n                arr[index++] = { operator: value, index: i };\n                break;\n            }\n        }\n    }\n\n    let op = arr[Math.floor(arr.length / 2)];\n\n    if (arr.length % 2 === 0) {\n\n        let secondOp = arr[Math.floor(arr.length / 2 - 1)];\n        if (op.operator.weight > secondOp.operator.weight) {\n            op = secondOp;\n        }\n    }\n    return op;\n}\n\nfunction removeOuterParenthesis(stringExp: string): string {\n\n    let remove = false;\n    try {\n        let index = 0;\n        let operators = 0;\n\n        if (stringExp.charAt(0) === \"(\") {\n            remove = true;\n        }\n        while ( remove && (stringExp.charAt(index) === \"(\" || operators > 0) ) {\n            if (stringExp.charAt(index) === \"(\") {\n                operators++;\n            }\n            else if (stringExp.charAt(index) === \")\") {\n                operators--;\n                if (operators === 0 && index !== stringExp.length - 1) {\n                    remove = false;\n                }\n            }\n            index++;\n        }\n    }\n    catch (error) {\n        console.error(error);\n    }\n    return remove ? stringExp.substring(1, stringExp.length - 1) : stringExp;\n}\n\n// TODO translate\n// TODO create methods for each of the laws\n// TODO generate truth tables\n// TODO simplify truth expressions\n// TODO F.eks A & B | B, check A & B first, since it can't be simplified, then check | B if B is in the previous expression\nconst TruthTablePage = ({}: TruthTablePage) => {\n\n    const [search, setSearch] = React.useState(\"\");\n\n    /**\n     * Updates the state of the current expression to the new search with all whitespace removed.\n     * If the element is not found, reset.\n     */\n    function onClick() {\n        let exp = (document.getElementById(\"truth-input\") as HTMLInputElement | null)?.value;\n        if (exp) {\n            exp = exp.replace(/\\s+/g, \"\"); // Replace All (/g) whitespace (/s) in the string\n            setSearch(exp);\n        }\n        else {\n            setSearch(\"\");\n        }\n    }\n\n    React.useEffect(() => {\n        // console.log(search);\n    }, [search]);\n\n    return (\n        <Layout title={ \"Truth tables\" } description={ \"Generate truth tables or simplify\" }>\n            <div>\n                <Input className={ `rounded-xl !pl-7 h-10` }\n                       id={ \"truth-input\" }\n                       leading={ <Search className={ \"pl-2 absolute\" }/> }\n                       trailing={\n                           <button\n                               className={ \"ml-1 px-1 bg-primaryPink text-black border border-gray-500 rounded-xl h-10\" }\n                               onClick={ onClick }>\n                               Simplify\n                           </button> }/>\n            </div>\n        </Layout>\n    );\n}\n\nexport const query = graphql`\n    query($language: String!) {\n        locales: allLocale(filter: {language: {eq: $language}}) {\n            edges {\n                node {\n                    ns\n                    data\n                    language\n                }\n            }\n        }\n    }\n`;\n\nexport default TruthTablePage;\n","export default function _objectDestructuringEmpty(obj) {\n  if (obj == null) throw new TypeError(\"Cannot destructure undefined\");\n}"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","Search","forwardRef","_ref","ref","_ref$color","color","_ref$size","size","rest","xmlns","width","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","cx","cy","r","x1","y1","x2","y2","displayName","className","id","name","type","placeholder","required","onChange","leading","trailing","React","Operator","operator","weight","values","getValues","implication","or","and","not","append","val","toString","Expression","exp1","exp2","isAtomic","equals","other","isEqual","getAtomicValue","laws","distributivity","deMorgansLaw","assosiativeLaw","commutativeLaw","eliminationOfImplication","absorption","x","common","_this","_isNot","op","_removeNot","exp","charAt","_removeNotFromString","_removeNotFromExp","replace","removeExp2","_this2","_this$exp2","contains","correctOperators","_exp1$exp","_exp1$exp2","atomic","s","simplify","stringExp","removeOuterParenthesis","simplifyRec","end","center","arr","index","operators","c","error","console","value","Math","floor","secondOp","getCenterOperatorIndex","substring","remove","obj","TypeError","_objectDestructuringEmpty","search","setSearch","Layout","title","description","Input","onClick","document","getElementById","_document$getElementB"],"sourceRoot":""}